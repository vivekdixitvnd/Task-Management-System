{"ast":null,"code":"// Format date to readable format\nexport const formatDate = dateString => {\n  if (!dateString) return \"N/A\";\n  const date = new Date(dateString);\n\n  // Check if date is valid\n  if (isNaN(date.getTime())) return \"Invalid date\";\n\n  // Format options\n  const options = {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\"\n  };\n  return date.toLocaleDateString(\"en-US\", options);\n};\n\n// Format date with time\nexport const formatDateTime = dateString => {\n  if (!dateString) return \"N/A\";\n  const date = new Date(dateString);\n\n  // Check if date is valid\n  if (isNaN(date.getTime())) return \"Invalid date\";\n\n  // Format options\n  const options = {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  };\n  return date.toLocaleDateString(\"en-US\", options);\n};\n\n// Format file size\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return \"0 Bytes\";\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","isNaN","getTime","options","year","month","day","toLocaleDateString","formatDateTime","hour","minute","formatFileSize","bytes","k","sizes","i","Math","floor","log","Number","parseFloat","pow","toFixed"],"sources":["C:/Users/Arnav/Desktop/development-project/Task-Management-System/frontend/src/utils/formatters.js"],"sourcesContent":["// Format date to readable format\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return \"N/A\"\r\n\r\n  const date = new Date(dateString)\r\n\r\n  // Check if date is valid\r\n  if (isNaN(date.getTime())) return \"Invalid date\"\r\n\r\n  // Format options\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  }\r\n\r\n  return date.toLocaleDateString(\"en-US\", options)\r\n}\r\n\r\n// Format date with time\r\nexport const formatDateTime = (dateString) => {\r\n  if (!dateString) return \"N/A\"\r\n\r\n  const date = new Date(dateString)\r\n\r\n  // Check if date is valid\r\n  if (isNaN(date.getTime())) return \"Invalid date\"\r\n\r\n  // Format options\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  }\r\n\r\n  return date.toLocaleDateString(\"en-US\", options)\r\n}\r\n\r\n// Format file size\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return \"0 Bytes\"\r\n\r\n  const k = 1024\r\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"]\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n\r\n  return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i]\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;;EAEjC;EACA,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,cAAc;;EAEhD;EACA,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACP,CAAC;EAED,OAAOP,IAAI,CAACQ,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;AAClD,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAIV,UAAU,IAAK;EAC5C,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;;EAEjC;EACA,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,cAAc;;EAEhD;EACA,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdG,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC;EAED,OAAOX,IAAI,CAACQ,kBAAkB,CAAC,OAAO,EAAEJ,OAAO,CAAC;AAClD,CAAC;;AAED;AACA,OAAO,MAAMQ,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EAEjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACzC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;EAEnD,OAAOM,MAAM,CAACC,UAAU,CAAC,CAACR,KAAK,GAAGI,IAAI,CAACK,GAAG,CAACR,CAAC,EAAEE,CAAC,CAAC,EAAEO,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGR,KAAK,CAACC,CAAC,CAAC;AAChF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}