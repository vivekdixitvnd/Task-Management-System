{"ast":null,"code":"// Email validation\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation (at least 6 characters)\nexport const isValidPassword = password => {\n  return password && password.length >= 6;\n};\n\n// Required field validation\nexport const isRequired = value => {\n  return value && value.trim() !== \"\";\n};\n\n// File type validation (PDF only)\nexport const isPdfFile = file => {\n  return file && file.type === \"application/pdf\";\n};\n\n// File size validation (max 5MB)\nexport const isValidFileSize = file => {\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  return file && file.size <= maxSize;\n};\n\n// Date validation (must be in the future)\nexport const isFutureDate = date => {\n  if (!date) return false;\n  const selectedDate = new Date(date);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return selectedDate >= today;\n};\n\n// Form validation for login\nexport const validateLoginForm = formData => {\n  const errors = {};\n  if (!isRequired(formData.email)) {\n    errors.email = \"Email is required\";\n  } else if (!isValidEmail(formData.email)) {\n    errors.email = \"Invalid email format\";\n  }\n  if (!isRequired(formData.password)) {\n    errors.password = \"Password is required\";\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Form validation for registration\nexport const validateRegisterForm = formData => {\n  const errors = {};\n  if (!isRequired(formData.name)) {\n    errors.name = \"Name is required\";\n  }\n  if (!isRequired(formData.email)) {\n    errors.email = \"Email is required\";\n  } else if (!isValidEmail(formData.email)) {\n    errors.email = \"Invalid email format\";\n  }\n  if (!isRequired(formData.password)) {\n    errors.password = \"Password is required\";\n  } else if (!isValidPassword(formData.password)) {\n    errors.password = \"Password must be at least 6 characters\";\n  }\n  if (formData.password !== formData.confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match\";\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Form validation for task creation/update\nexport const validateTaskForm = formData => {\n  const errors = {};\n  if (!isRequired(formData.title)) {\n    errors.title = \"Title is required\";\n  }\n  if (!isRequired(formData.description)) {\n    errors.description = \"Description is required\";\n  }\n  if (!isRequired(formData.status)) {\n    errors.status = \"Status is required\";\n  }\n  if (!isRequired(formData.priority)) {\n    errors.priority = \"Priority is required\";\n  }\n  if (!isRequired(formData.dueDate)) {\n    errors.dueDate = \"Due date is required\";\n  } else if (!isFutureDate(formData.dueDate)) {\n    errors.dueDate = \"Due date must be in the future\";\n  }\n  if (!isRequired(formData.assignedTo)) {\n    errors.assignedTo = \"Assignee is required\";\n  }\n\n  // Validate documents if any\n  if (formData.documents && formData.documents.length > 0) {\n    const documentErrors = [];\n    for (let i = 0; i < formData.documents.length; i++) {\n      const file = formData.documents[i];\n      if (!isPdfFile(file)) {\n        documentErrors.push(`File ${i + 1} must be a PDF`);\n      } else if (!isValidFileSize(file)) {\n        documentErrors.push(`File ${i + 1} exceeds the maximum size of 5MB`);\n      }\n    }\n    if (documentErrors.length > 0) {\n      errors.documents = documentErrors;\n    }\n    if (formData.documents.length > 3) {\n      errors.documents = [...(errors.documents || []), \"Maximum 3 documents allowed\"];\n    }\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Form validation for user creation/update\nexport const validateUserForm = formData => {\n  const errors = {};\n  if (!isRequired(formData.name)) {\n    errors.name = \"Name is required\";\n  }\n  if (!isRequired(formData.email)) {\n    errors.email = \"Email is required\";\n  } else if (!isValidEmail(formData.email)) {\n    errors.email = \"Invalid email format\";\n  }\n  if (formData.password && !isValidPassword(formData.password)) {\n    errors.password = \"Password must be at least 6 characters\";\n  }\n  if (!isRequired(formData.role)) {\n    errors.role = \"Role is required\";\n  }\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","isValidPassword","password","length","isRequired","value","trim","isPdfFile","file","type","isValidFileSize","maxSize","size","isFutureDate","date","selectedDate","Date","today","setHours","validateLoginForm","formData","errors","isValid","Object","keys","validateRegisterForm","name","confirmPassword","validateTaskForm","title","description","status","priority","dueDate","assignedTo","documents","documentErrors","i","push","validateUserForm","role"],"sources":["C:/Users/Arnav/Desktop/development-project/Task-Management-System/frontend/src/utils/validation.js"],"sourcesContent":["// Email validation\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n  return emailRegex.test(email)\r\n}\r\n\r\n// Password validation (at least 6 characters)\r\nexport const isValidPassword = (password) => {\r\n  return password && password.length >= 6\r\n}\r\n\r\n// Required field validation\r\nexport const isRequired = (value) => {\r\n  return value && value.trim() !== \"\"\r\n}\r\n\r\n// File type validation (PDF only)\r\nexport const isPdfFile = (file) => {\r\n  return file && file.type === \"application/pdf\"\r\n}\r\n\r\n// File size validation (max 5MB)\r\nexport const isValidFileSize = (file) => {\r\n  const maxSize = 5 * 1024 * 1024 // 5MB\r\n  return file && file.size <= maxSize\r\n}\r\n\r\n// Date validation (must be in the future)\r\nexport const isFutureDate = (date) => {\r\n  if (!date) return false\r\n  const selectedDate = new Date(date)\r\n  const today = new Date()\r\n  today.setHours(0, 0, 0, 0)\r\n  return selectedDate >= today\r\n}\r\n\r\n// Form validation for login\r\nexport const validateLoginForm = (formData) => {\r\n  const errors = {}\r\n\r\n  if (!isRequired(formData.email)) {\r\n    errors.email = \"Email is required\"\r\n  } else if (!isValidEmail(formData.email)) {\r\n    errors.email = \"Invalid email format\"\r\n  }\r\n\r\n  if (!isRequired(formData.password)) {\r\n    errors.password = \"Password is required\"\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// Form validation for registration\r\nexport const validateRegisterForm = (formData) => {\r\n  const errors = {}\r\n\r\n  if (!isRequired(formData.name)) {\r\n    errors.name = \"Name is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.email)) {\r\n    errors.email = \"Email is required\"\r\n  } else if (!isValidEmail(formData.email)) {\r\n    errors.email = \"Invalid email format\"\r\n  }\r\n\r\n  if (!isRequired(formData.password)) {\r\n    errors.password = \"Password is required\"\r\n  } else if (!isValidPassword(formData.password)) {\r\n    errors.password = \"Password must be at least 6 characters\"\r\n  }\r\n\r\n  if (formData.password !== formData.confirmPassword) {\r\n    errors.confirmPassword = \"Passwords do not match\"\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// Form validation for task creation/update\r\nexport const validateTaskForm = (formData) => {\r\n  const errors = {}\r\n\r\n  if (!isRequired(formData.title)) {\r\n    errors.title = \"Title is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.description)) {\r\n    errors.description = \"Description is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.status)) {\r\n    errors.status = \"Status is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.priority)) {\r\n    errors.priority = \"Priority is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.dueDate)) {\r\n    errors.dueDate = \"Due date is required\"\r\n  } else if (!isFutureDate(formData.dueDate)) {\r\n    errors.dueDate = \"Due date must be in the future\"\r\n  }\r\n\r\n  if (!isRequired(formData.assignedTo)) {\r\n    errors.assignedTo = \"Assignee is required\"\r\n  }\r\n\r\n  // Validate documents if any\r\n  if (formData.documents && formData.documents.length > 0) {\r\n    const documentErrors = []\r\n\r\n    for (let i = 0; i < formData.documents.length; i++) {\r\n      const file = formData.documents[i]\r\n\r\n      if (!isPdfFile(file)) {\r\n        documentErrors.push(`File ${i + 1} must be a PDF`)\r\n      } else if (!isValidFileSize(file)) {\r\n        documentErrors.push(`File ${i + 1} exceeds the maximum size of 5MB`)\r\n      }\r\n    }\r\n\r\n    if (documentErrors.length > 0) {\r\n      errors.documents = documentErrors\r\n    }\r\n\r\n    if (formData.documents.length > 3) {\r\n      errors.documents = [...(errors.documents || []), \"Maximum 3 documents allowed\"]\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors,\r\n  }\r\n}\r\n\r\n// Form validation for user creation/update\r\nexport const validateUserForm = (formData) => {\r\n  const errors = {}\r\n\r\n  if (!isRequired(formData.name)) {\r\n    errors.name = \"Name is required\"\r\n  }\r\n\r\n  if (!isRequired(formData.email)) {\r\n    errors.email = \"Email is required\"\r\n  } else if (!isValidEmail(formData.email)) {\r\n    errors.email = \"Invalid email format\"\r\n  }\r\n\r\n  if (formData.password && !isValidPassword(formData.password)) {\r\n    errors.password = \"Password must be at least 6 characters\"\r\n  }\r\n\r\n  if (!isRequired(formData.role)) {\r\n    errors.role = \"Role is required\"\r\n  }\r\n\r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors,\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}