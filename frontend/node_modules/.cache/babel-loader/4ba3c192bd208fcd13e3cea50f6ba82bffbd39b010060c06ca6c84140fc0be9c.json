{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors (token expired)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// Set auth token for future requests\nexport const setAuthToken = token => {\n  if (token) {\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common[\"Authorization\"];\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","setAuthToken","defaults","common"],"sources":["C:/Users/HP/Downloads/task-management-system (1)/frontend/src/utils/api.js"],"sourcesContent":["import axios from \"axios\"\n\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Add a request interceptor to add the auth token to every request\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => Promise.reject(error),\n)\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  },\n)\n\n// Set auth token for future requests\nexport const setAuthToken = (token) => {\n  if (token) {\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`\n  } else {\n    delete api.defaults.headers.common[\"Authorization\"]\n  }\n}\n\nexport default api\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,YAAY,GAAIb,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTR,GAAG,CAACsB,QAAQ,CAACnB,OAAO,CAACoB,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUf,KAAK,EAAE;EAClE,CAAC,MAAM;IACL,OAAOR,GAAG,CAACsB,QAAQ,CAACnB,OAAO,CAACoB,MAAM,CAAC,eAAe,CAAC;EACrD;AACF,CAAC;AAED,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}